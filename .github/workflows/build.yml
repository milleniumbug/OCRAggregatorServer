name: Test on GH actions environment

on: 
  - push
  - pull_request

env:
  py: "3.9"
  vcpkgCommitId: '500c6f2b85e14411fe56a093ed5cd77177a6bfa9'


jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            venv_scripts_dir: "Scripts"
            VCPKG_DEFAULT_TRIPLET: "x64-windows-static-md"
            darknet_build_args: "-UseVCPKG -ForceLocalVCPKG -DoNotUpdateVCPKG -EnableOPENCV"
          - os: macOS-latest
            venv_scripts_dir: "bin"
            VCPKG_DEFAULT_TRIPLET: "x64-osx"
            darknet_build_args: "-UseVCPKG -ForceLocalVCPKG -DoNotUpdateVCPKG -EnableOPENCV"
          - os: ubuntu-latest
            VCPKG_DEFAULT_TRIPLET: "x64-linux"
            venv_scripts_dir: "bin"
            darknet_build_args: "-UseVCPKG -ForceLocalVCPKG -DoNotUpdateVCPKG -EnableOPENCV"

    steps:
      - uses: actions/checkout@v3
      - name: checkout libdarknetpy
        uses: actions/checkout@v3
        with:
          path: darknet
          repository: nikitalita/libdarknetpy

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.py }}

      - uses: lukka/get-cmake@latest
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@main
        id: runvcpkg
        with:
          # This specifies the location of vcpkg, where it is going to be restored from cache, or create from scratch.
          vcpkgDirectory: '${{ github.workspace }}/darknet/vcpkg'
          # The Git commit id of vcpkg to be checked out. This is only needed because we are not using a submodule.
          vcpkgGitCommitId: '${{ env.vcpkgCommitId }}'
          # The vcpkg.json file, which will be part of cache key computation.
          vcpkgJsonGlob: '**/darknet/vcpkg.json'
          doNotCache: false

      - name: Install deps
        run: brew install libomp yasm nasm pkg-config 7zip wget
        if: matrix.os == 'macOS-latest'

      # We also run out of space on ubuntu if we don't do an apt-get clean after installing
      - name: Update apt and install deps
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt-get install -y yasm nasm gperf libgles2-mesa-dev libx11-dev libxft-dev libxext-dev libxrandr-dev libxi-dev libxcursor-dev libxdamage-dev libxinerama-dev libdbus-1-dev libxtst-dev build-essential g++ apt-transport-https ca-certificates gnupg software-properties-common wget zlib1g p7zip-full
          sudo apt-get clean

      - name: 'Build Darknet'
        shell: pwsh
        env:
          VCPKG_DEFAULT_TRIPLET: ${{ matrix.VCPKG_DEFAULT_TRIPLET }}
        run: |
          pip install ${{ github.workspace }}/darknet

      - name: Build Standalone binary
        run: |
          python -m venv venv
          venv/${{matrix.venv_scripts_dir}}/Activate.ps1
          python -m pip install -r requirements.txt
          python -m pip install .
          python -m pip install pyinstaller
          cd data
          wget -nv https://github.com/nikitalita/Bubble-detection-model/releases/download/0.0.1/ImageTrans-Balloons-Model.zip
          unzip ImageTrans-Balloons-Model.zip
          rm ImageTrans-Balloons-Model.zip
          cd ..
          pyinstaller --clean --additional-hooks-dir hooks --name "ocr_aggregator_server" standalone.py
          deactivate
          Remove-Item venv -Recurse -Force
        shell: pwsh

      - name: Zip artifact
        run: |
          cd ${{ github.workspace }}/dist
          7z a -r ocr_aggregator_server_${{ matrix.os }}.zip ocr_aggregator_server
        shell: pwsh

      - uses: actions/upload-artifact@v2
        continue-on-error: true
        with:
          name: ocr_aggregator_server_${{ matrix.os }}
          path: ${{ github.workspace }}/dist/ocr_aggregator_server_${{ matrix.os }}.zip
